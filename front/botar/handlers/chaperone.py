# handlers/chaperone.py
from math import ceil
from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.fsm.context import FSMContext
from states.states import ChaperoneState
from services import api_client

router = Router()  # Router for chaperone-related handlers

PER_PAGE = 8  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

@router.callback_query(F.data == "role_chaperone")
async def start_chaperone(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ."""
    await callback.answer()
    data = await state.get_data()
    if data.get("teacher") and data.get("projects"):
        await state.set_state(ChaperoneState.main_menu)
        await show_chaperone_menu(callback.message, state)
    else:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await state.set_state(ChaperoneState.entering_login)
        cancel_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await callback.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:", reply_markup=cancel_kb)

@router.message(ChaperoneState.entering_login)
async def receive_login(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è."""
    login = message.text.strip()
    if login.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    await state.update_data(login=login)
    await state.set_state(ChaperoneState.entering_password)
    cancel_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:", reply_markup=cancel_kb)

@router.message(ChaperoneState.entering_password)
async def receive_password(message: Message, state: FSMContext):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é."""
    password = message.text.strip()
    if password.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –ó–∞–ø—É—Å—Ç–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    data = await state.get_data()
    login = data.get("login")
    if not login:
        await message.answer("–õ–æ–≥–∏–Ω —É—Ç–µ—Ä—è–Ω, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /start.")
        await state.clear()
        return
    try:
        teacher_data = await api_client.auth_chaperone(login, password)
        print(teacher_data)
    except api_client.ApiError as e:
        err_text = str(e)
        await message.answer(f"‚ùå {err_text}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–±—è –∫ –≤–≤–æ–¥—É –ª–æ–≥–∏–Ω–∞
        await state.set_state(ChaperoneState.entering_login)
        cancel_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω:", reply_markup=cancel_kb)
        return
    # teacher_data –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    # {
    #   "projects": [ { "id": "...", "name": "..." }, ... ],
    #   "user": { "id": "...", "login": "...", "password": "...", "school_name": "‚Ññ17" }
    # }
    teacher_user = teacher_data.get("user", teacher_data)
    projects = teacher_data.get("projects", [])
    await state.update_data(teacher=teacher_user, projects=projects, authorized_role="companion")
    await state.set_state(ChaperoneState.main_menu)
    await show_chaperone_menu(message, state)

async def show_chaperone_menu(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    data = await state.get_data()
    teacher = data.get("teacher", {})
    school_name = teacher.get("school_name", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è üé§", callback_data="companion_projects")],
        [InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã üéì", callback_data="show_workshops")]
    ])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, —Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª! üìö –®–∫–æ–ª–∞: *{school_name}*", parse_mode="Markdown")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# ----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è üé§" —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data == "companion_projects")
async def companion_projects(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 8)."""
    print("DEBUG: companion_projects handler –≤—ã–∑–≤–∞–Ω")
    await callback.answer()
    data = await state.get_data()
    projects = data.get("projects")
    if not projects:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø—É—Å—Ç. üòî")
        return
    sorted_projects = sorted(projects, key=lambda p: p.get("name", "").lower())
    if len(sorted_projects) <= PER_PAGE:
        buttons = []
        for proj in sorted_projects:
            proj_name = proj.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            proj_id = proj.get("id")
            buttons.append([InlineKeyboardButton(text=proj_name, callback_data=f"project_{proj_id}")])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="companion_main_menu")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("–í—ã–±–µ—Ä–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", reply_markup=kb)
    else:
        await state.update_data(projects_sorted=sorted_projects)
        await display_projects_page(callback.message, state, page=0)

async def display_projects_page(message: Message, state: FSMContext, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)."""
    data = await state.get_data()
    projects_sorted = data.get("projects_sorted", [])
    if not projects_sorted:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –ø—É—Å—Ç. üòî")
        return
    total = len(projects_sorted)
    total_pages = ceil(total / PER_PAGE)
    start_index = page * PER_PAGE
    end_index = start_index + PER_PAGE
    current_projects = projects_sorted[start_index:end_index]
    buttons = []
    for proj in current_projects:
        proj_name = proj.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        proj_id = proj.get("id")
        buttons.append([InlineKeyboardButton(text=proj_name, callback_data=f"project_{proj_id}")])
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚Üê", callback_data=f"projects_page_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚Üí", callback_data=f"projects_page_{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="companion_main_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ:", reply_markup=kb)

@router.callback_query(F.data.startswith("projects_page_"))
async def projects_page_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–ø–∏—Å–∫–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π."""
    await callback.answer()
    try:
        page = int(callback.data.split("_")[-1])
    except Exception:
        page = 0
    await display_projects_page(callback.message, state, page)

@router.callback_query(F.data == "companion_main_menu")
async def companion_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ."""
    await callback.answer()
    await show_chaperone_menu(callback.message, state)

@router.callback_query(F.data.startswith("project_"))
async def show_project_details(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π."""
    await callback.answer()
    project_id = callback.data.split("_", 1)[1]
    data = await state.get_data()
    project_details = data.get(f"project_{project_id}")
    if not project_details:
        try:
            project_details = await api_client.get_speaker_details(project_id)
        except api_client.ApiError as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è: {e}")
            return
        await state.update_data({f"project_{project_id}": project_details})
    info_text = (
        f"**–î–µ—Ç–∞–ª–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è:**\n\n"
        f"üë§ **–ò–º—è:** {project_details.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù **–ü—Ä–æ–µ–∫—Ç:** {project_details.get('project_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üé§ **–§–æ—Ä–º–∞—Ç:** {project_details.get('project_format', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üî¢ **–°–ª–æ—Ç:** {project_details.get('project_slot', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚è∞ **–í—Ä–µ–º—è:** {project_details.get('project_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè´ **–ö–ª–∞—Å—Å:** {project_details.get('school_class', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìö **–®–∫–æ–ª–∞:** {project_details.get('school_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="companion_projects")]
    ])
    img_url = project_details.get("image_url")
    if img_url:
        try:
            await callback.message.answer_photo(photo=img_url, caption=info_text, parse_mode="Markdown", reply_markup=kb)
        except Exception:
            await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=kb)
    else:
        await callback.message.answer(info_text, parse_mode="Markdown", reply_markup=kb)
